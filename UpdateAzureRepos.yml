trigger:
  branches:
    include:
      - '*'
pr:
  branches:
    include:
      - '*'

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Exibe uma separação visual no console
      Write-Host '============================================================='
      Write-Host 'Sincronizando repositório GitHub com repositório Azure DevOps'
      Write-Host '============================================================='

      # Define o diretório de trabalho base a partir da pipeline de build
      $stageDir = '$(Build.SourcesDirectory)' | Split-Path

      # Define o diretório onde o repositório GitHub será clonado
      $githubDir = Join-Path -Path $stageDir -ChildPath "gitHub"

      # Define o caminho para o repositório GitHub clonado
      $source = Join-Path -Path $githubDir -ChildPath "Addin.git"

      # Cria o alias para autenticação no GitHub utilizando o token de acesso pessoal (PAT)
      $alias = 'Gabrieups' + "$(Github.PAT)"

      # Define a URL para clonar o repositório GitHub
      $sourceURL = "https://$alias@github.com/Gabrieups/Addin"

      # Define a URL para o repositório Azure DevOps
      $destinationURL = "https://$(AzureDevOps.PAT)@dev.azure.com/BREUPX-ORG/Learn-Project/_git/Addin"

      # Remove o diretório de trabalho se já existir, para garantir uma operação limpa
      if (Test-Path -Path $githubDir) {
          Write-Host "Removendo diretório existente: $githubDir"
          Remove-Item -Path $githubDir -Recurse -Force
      }

      # Cria o diretório do GitHub e clona o repositório GitHub como espelho
      Write-Host "Criando diretório: $githubDir e clonando repositório GitHub"
      New-Item -ItemType Directory -Path $githubDir -Force | Out-Null
      Set-Location -Path $githubDir
      git clone --mirror $sourceURL

      # Define o local de trabalho para o diretório do repositório clonado
      Set-Location -Path $source

      # Remove o remoto secundário "secondary" se ele já existir
      Write-Host "Removendo remoto 'secondary' (se existente)"
      git remote rm secondary

      # Adiciona o repositório Azure DevOps como remoto secundário
      Write-Host "Adicionando remoto 'secondary' apontando para Azure DevOps"
      git remote add --mirror=fetch secondary $destinationURL

      # Sincroniza alterações do repositório GitHub
      Write-Host "Sincronizando alterações do repositório GitHub"
      git fetch origin

      # (Opcional) Sincroniza o repositório Azure DevOps localmente antes de enviar
      Write-Host "Sincronizando com o repositório Azure DevOps (opcional)"
      git pull secondary main

      # Realiza o push de todas as alterações para o repositório Azure DevOps
      Write-Host "Enviando todas as alterações para o repositório Azure DevOps"
      git push secondary --all --force

      # Exibe uma mensagem de conclusão da sincronização
      Write-Host "============================================================="
      Write-Host "Sincronização concluída com sucesso!"
      Write-Host "============================================================="

      # Retorna ao diretório inicial e remove o diretório temporário
      Set-Location -Path $stageDir
      if (Test-Path -Path $githubDir) {
          Write-Host "Limpando o diretório temporário: $githubDir"
          Remove-Item -Path $githubDir -Recurse -Force
      }
